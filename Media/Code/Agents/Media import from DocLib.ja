<?xml version='1.0' encoding='utf-8'?>
<agent name='Media import from DocLib' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.0' replicaid='C1257C070036FEE1' hide='web v3' publicaccess='false'
 designerversion='8.5.3' restrictions='unrestricted'>
<noteinfo noteid='1322' unid='4A7B06A5B4456177C1257C0B0031EFFC' sequence='60'>
<created><datetime dst='true'>20131021T110527,00+02</datetime></created>
<modified><datetime>20131112T131805,18+01</datetime></modified>
<revised><datetime>20131112T131805,16+01</datetime></revised>
<lastaccessed><datetime>20131112T131805,16+01</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20131021T110528,09+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Domino Administrator/O=LinQed</name></updatedby>
<wassignedby><name>CN=Domino Administrator/O=LinQed</name></wassignedby>
<designchange><datetime>20131112T131808,61+01</datetime></designchange>
<trigger type='actionsmenu'/>
<documentset type='runonce'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='c:\Program Files (x86)\IBM\Notes\Data' compiledebug='true'><java
 name='JavaAgent.java'>//import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import lotus.domino.*;

public class JavaAgent extends AgentBase {

	private String sourceDbServer;
	 
	//private static String tmpPath = "c:\\temp\\";
	boolean tempPathCreated = false;
	
	private Session session;
	
	private int numNew = 0;
	private int numProcess = 0;
	private int numUpdated = 0;

	Database dbCurrent = null;
	View vwTarget = null;
	View vwFoldersByPath = null;
	
	private HashMap&lt;String,String&gt; folders = new HashMap&lt;String,String&gt;();
	
	private static final String CAT_SEP_CHAR = "\\";
	
	private String docLibBaseUrl;

	@SuppressWarnings("unchecked")
	public void NotesMain() {

		try {
			
			session = getSession();
			AgentContext agentContext = session.getAgentContext();
			
			dbCurrent = agentContext.getCurrentDatabase();
			View vwConfig = dbCurrent.getView("vConfig");
			
			Document docConfig = vwConfig.getFirstDocument();

			if (docConfig == null) {
				
				throw( new Exception("no configuration document found"));
			}
			
			String dbPathDocLib = docConfig.getItemValueString("dbDocLibPath"); 
			docLibBaseUrl = docConfig.getItemValueString("hostName") + "/" + dbPathDocLib.replace("\\", "/");
			
			sourceDbServer = dbCurrent.getServer();

			System.out.println("--- started ---");

			long started = (new Date()).getTime();
			
			//open doclibrary db
			Database dbDocLib = session.getDatabase( sourceDbServer, dbPathDocLib);
			if (!dbDocLib.isOpen() ) {
				throw(new Exception("could not open doc library database at " + dbPathDocLib + " (on " + sourceDbServer + ")") );
			}
			
			//init views
			View vwItemsById = dbCurrent.getView("vItemsById");
			
			View vwFilesById = dbCurrent.getView("vFilesById");
			
			vwFoldersByPath = dbCurrent.getView("vFoldersByPath");

			//create folders structure based on category view in DocLib database
			//categories can be nested using the \ character
			View vwBycat = dbDocLib.getView("ByCategory");
			ViewNavigator nav = vwBycat.createViewNavMaxLevel(5);
			
			System.out.println("create folders from categories");
			
			ArrayList&lt;String&gt; folderPath = new ArrayList&lt;String&gt;();
			String parentId = "root";
			
			ViewEntry ve = nav.getFirst();
			while (null != ve) {
				
				if (ve.isCategory()) {
					Vector&lt;Object&gt; colValues = ve.getColumnValues();
					
					String folderTitle = (String) colValues.get(0);
					
					int level = ve.getIndentLevel();
					
					if (level == 0) {
						System.out.println("clear path");
						parentId = "root";
						folderPath.clear();
					}
					
					folderPath.add(folderTitle);
					
					System.out.println("&gt; process folder: " + folderTitle + " - path: " + join(folderPath, CAT_SEP_CHAR));
					
					String id = createFolder( folderPath, folderTitle, parentId );
					
					//System.out.println("put " + join(folderPath, CAT_SEP_CHAR) + " with " + id);
					folders.put(join(folderPath, CAT_SEP_CHAR), id);
					
					parentId = id;
					
				}
				
				ViewEntry next = nav.getNext(ve);
				ve.recycle();
				ve = next;
			}
			
			recycle(nav, vwBycat);
			
			//createDemoFolders(vwItemsById);
	
			
			//import all documents/ files
			DocumentCollection dc = dbDocLib.search("Form=\"Document\"");
			
			int numFound = dc.getCount();
			
			Document doc = dc.getFirstDocument();
			while (null != doc) {
				
				numProcess++;
				System.out.println("- processing document " + numProcess + "/" + numFound);
				
				importDocument(vwItemsById, vwFilesById, doc);
				
				Document docNext = dc.getNextDocument(doc);
				doc.recycle();
				doc = docNext;
			}
			

			System.out.println(" ");
			System.out.println("Import completed (in " + (((new Date()).getTime() - started) / 1000) + " seconds)");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private String getCategory( String fileName ) {
		
		String ext = fileName.substring( fileName.lastIndexOf(".")+1).toLowerCase();
		
		
			if (ext.equals("pdf") ) {
				return "PDFs";
			} else if (ext.equals("jpg") || ext.equals("png") || ext.equals("tiff") ) {
				return "Images";
			} else if (ext.equals("mov") || ext.equals("avi") || ext.equals("mpg") || ext.equals("mp4") ) {
			return "Videos";
			} else if ( ext.equals("ppt") || ext.equals("pptx") ) {
				return "Presentations";
			} else if ( ext.equals("doc") || ext.equals("docx") ) {
				return "Documents";
			} else if ( ext.equals("xls") || ext.equals("xlsx") ) {
				return "Spreadsheets";
			} else {
				return "Other";
			}
			
	}
	
	@SuppressWarnings("unchecked")
	private void importDocument(View vwItemsById, View vwFilesById, Document docSource) {
	
		//Document docFile = null;
		Document docFileMetadata = null;
		RichTextItem rt = null;
		
		//final String TARGET_FIELD_FILE = "attachment";
		
		try {
			
			boolean processDoc = false;
			
			String id = docSource.getUniversalID().toLowerCase();
			
			DateTime srcLastModified = docSource.getLastModified();
			Date srcModified = srcLastModified.toJavaDate();
			srcLastModified.recycle();

			docFileMetadata = vwItemsById.getDocumentByKey(id, true);
			
			if (null == docFileMetadata) {
				docFileMetadata = vwItemsById.getParent().createDocument();
				docFileMetadata.replaceItemValue("form", "frmFileMetadata");
				docFileMetadata.replaceItemValue("id", id );
				numNew++;
				
				processDoc = true;
			} else {

				// check if source has been modified
				Date tgtModified = readDate(docFileMetadata, "lastModifiedSource");
				processDoc = (tgtModified == null || (srcModified.getTime() &gt; tgtModified.getTime()) );
			}

			if (!processDoc) {
				//return;
			}
			
			/*
			boolean processFile = false;

			docFile = vwFilesById.getDocumentByKey(id, true);
			
			if (null == docFile) {
			
				docFile = vwItemsById.getParent().createDocument();
				docFile.replaceItemValue("form", "frmFile");
				docFile.replaceItemValue("id", id );
				processFile = true;
				
			} else {

				// check if source has been modified
				Date tgtModified = readDate(docFile, "lastModifiedSource");
				processFile = (tgtModified == null || (srcModified.getTime() &gt; tgtModified.getTime()));
				
			}
			*/
			
			docFileMetadata.replaceItemValue("lastModifiedSource", docSource.getLastModified());
			docFileMetadata.replaceItemValue("title", docSource.getItemValueString("Subject"));
			
			Date created = docSource.getCreated().toJavaDate();
			Calendar cal = Calendar.getInstance();
			cal.setTime(created);
			
			String year = "" + cal.get(Calendar.YEAR);
			
			String sourceCategory = docSource.getItemValueString("categories");
			
			docFileMetadata.replaceItemValue("folderId", folders.get(sourceCategory) );
			
			String fileName = docFileMetadata.getItemValueString("attachmentName");

			
			//if (processFile) {
				
				//docFile.replaceItemValue("lastModifiedSource", docSource.getLastModified());
			
				rt = (RichTextItem) docSource.getFirstItem("Body");
				Vector&lt;EmbeddedObject&gt; eos = rt.getEmbeddedObjects();
				Iterator&lt;EmbeddedObject&gt; it = eos.iterator();
				while (it.hasNext()) {
					
					EmbeddedObject eo = it.next();
					fileName = eo.getName();
					String ext = fileName.substring( fileName.lastIndexOf(".")+1).toLowerCase();
					String type = "";
					
					if (ext.equals("pdf") ) {
						type = "pdf";
					} else if (ext.equals("jpg") || ext.equals("png") || ext.equals("tiff") ) {
						type = "jpg";
					} else if (ext.equals("mov") || ext.equals("avi") || ext.equals("mpg") || ext.equals("mp4") ) {
						type = "mov";
					} else if ( ext.equals("ppt") || ext.equals("pptx") ) {
						type = "pptx";
					} else if ( ext.equals("doc") || ext.equals("docx") ) {
						type = "docx";
					} else if ( ext.equals("xls") || ext.equals("xlsx") ) {
						type = "xlsx";
					}
					
					if (type != null) {
						docFileMetadata.replaceItemValue("type", type);
					}
					
					docFileMetadata.replaceItemValue("attachmentName", fileName );
					docFileMetadata.replaceItemValue("attachmentSize", eo.getFileSize() );
					docFileMetadata.replaceItemValue("attachmentDbPath", docSource.getParentDatabase().getFilePath() );
					docFileMetadata.replaceItemValue("attachmentSourceUnid", docSource.getUniversalID() );
					
					docFileMetadata.replaceItemValue("attachmentUrlExt", docLibBaseUrl + "/0/" + id + "/$file/" + java.net.URLEncoder.encode(fileName, "UTF-8") ); 
					
					/*
					 * if (docFile.hasItem(TARGET_FIELD_FILE) ) {
				
						docFile.removeItem(TARGET_FIELD_FILE);
					}
					
					
					//extract and copy
					if (!tempPathCreated) {
						File tmp = new File(tmpPath);
						tmp.mkdirs();
						tempPathCreated = true;
					}
					
					eo.extractFile(tmpPath + fileName);
	
					RichTextItem rtCopied = docFile.createRichTextItem(TARGET_FIELD_FILE);
					EmbeddedObject eoCopied = rtCopied.embedObject(EmbeddedObject.EMBED_ATTACHMENT, null, tmpPath + fileName, fileName);
	
					// cleanup
					File f = new File(tmpPath + fileName);
					f.delete();
					
					recycle(eoCopied, rtCopied);
					*/
				}
				
			//	docFile.save();
				
			//}
			
			String category = getCategory(fileName);
			
			docFileMetadata.replaceItemValue("category", category );
			Vector&lt;String&gt; tags = new Vector&lt;String&gt;();
			tags.add( year);
			tags.add(category);
			
			docFileMetadata.replaceItemValue("year", year);
			docFileMetadata.replaceItemValue("tags", tags);
			
			setDate(docFileMetadata, "datecreated", created);
			docFileMetadata.replaceItemValue("Createdby", docSource.getItemValueString("From") );
			
			numUpdated++;
			docFileMetadata.save();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			
			recycle(rt, docFileMetadata);
			
		}
	
	}
	
	private static String join( ArrayList&lt;String&gt; in, String sep) {
		StringBuilder sb = new StringBuilder();
		
		Iterator&lt;String&gt; it = in.iterator();
		
		while (it.hasNext() ) {
			sb.append( it.next() );
			if (it.hasNext()) {
				sb.append(sep);
			}
		}
		return sb.toString();
	}
	
	private String createFolder( ArrayList&lt;String&gt; folderPath, String folderTitle, String parentId) {
		
		Document docFolder = null;
		String id = null;
		
		try {
			if (folderTitle.length()==0) {
				return null;
			}
			
			String path = join(folderPath, CAT_SEP_CHAR);
			
		//	System.out.println("process folder " + folderTitle + " with path: " + path );
			
			//check if folder already exists
			ViewEntry veFolder = vwFoldersByPath.getEntryByKey( path, true);
			
			if (null == veFolder) {
				
				System.out.println("doesn't exist: create");
				
				//create folder
				docFolder = dbCurrent.createDocument();
				
				id = docFolder.getUniversalID().toLowerCase();
				
				docFolder.replaceItemValue("form", "frmFolder");
				docFolder.replaceItemValue("id", id);
				docFolder.replaceItemValue("folderId", parentId);
				docFolder.replaceItemValue("title", folderTitle);
				docFolder.replaceItemValue("folderPath", path);

				Vector&lt;String&gt; folderTree = new Vector&lt;String&gt;();
				folderTree.add("root");
				
				//add id's of all entries in the folderPath, except the current (might not exist yet...)
				if (folderPath.size() &gt; 1) {
					System.out.println("create tree with " + folderPath.size() + "els in tree");
					
					StringBuilder p = new StringBuilder();
					
					for (int i=0; i&lt;(folderPath.size()-1); i++) {
						p.append(folderPath.get(i) );
						
						String _id = folders.get( p.toString() );
						System.out.println("found id: " + _id + " for " + folderPath.get(i) );
						folderTree.add(_id);
						
						p.append( CAT_SEP_CHAR);
					}
					
				}
				folderTree.add(id);
				
				docFolder.replaceItemValue("folderTree", folderTree);
				docFolder.save();
				
			} else {
				
				System.out.println("exists: return id");
				
				id = (String) veFolder.getColumnValues().get(1);
				
				System.out.println("id=" + id);
				
				
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			
			recycle(docFolder);
			
		}
		
		return id;
		
	}
	

	/*private void importFolder(View vwEntriesById, String id, String cat, String parentId, String treeBase) {
		
		Document docFolder = null;
		
		try {
			
			docFolder = vwEntriesById.getDocumentByKey(id, true);
			
			if (docFolder == null) {
			
				docFolder = vwEntriesById.getParent().createDocument();
				docFolder.replaceItemValue("form", "frmFolder");
				docFolder.replaceItemValue("id", id);
			
			}	
			
			docFolder.replaceItemValue("folderId", parentId);
			docFolder.replaceItemValue("title", cat);

			Vector&lt;String&gt; folderTree = new Vector&lt;String&gt;();
			
			if (treeBase != null) {
				String[] treeBaseEls = treeBase.split("#");
				for (String treeEl : treeBaseEls) {
					folderTree.add(treeEl);
				}
			}
			
			folderTree.add(parentId);
			folderTree.add(id);
			docFolder.replaceItemValue("folderTree", folderTree);

			docFolder.save();
			
		} catch (NotesException e) {
			e.printStackTrace();
		} finally {
			
			recycle(docFolder);
			
		}
		
	}
	
	
	private void createDemoFolders(View vwItemsById) {
		
		//
		Vector&lt;String&gt; folderTree = new Vector&lt;String&gt;();
		folderTree.add("root");
		
		importFolder(vwItemsById, "1", "Chipsets", "root", null);
		
		importFolder(vwItemsById, "11", "Stingray", "1", "root");
		importFolder(vwItemsById, "111", "Stingray 100", "11", "root#1");
		importFolder(vwItemsById, "112", "Stingray 200", "11", "root#1");
		importFolder(vwItemsById, "113", "Stingray 400", "11", "root#1");
		importFolder(vwItemsById, "114", "Stingray 600", "11", "root#1");
		
		importFolder(vwItemsById, "12", "Barracuda", "1", "root");
		importFolder(vwItemsById, "121", "Barracuda 300", "12", "root#1");
		importFolder(vwItemsById, "122", "Barracuda 500", "12", "root#1");
		importFolder(vwItemsById, "123", "Barracuda 900", "12", "root#1");
		
		importFolder(vwItemsById, "13", "Mako", "1", "root");
		importFolder(vwItemsById, "131", "Mako 200", "13", "root#1");
		importFolder(vwItemsById, "132", "Mako 400", "13", "root#1");
		importFolder(vwItemsById, "133", "Mako 800", "13", "root#1");
		importFolder(vwItemsById, "133", "Mako 900", "13", "root#1");
		
		importFolder(vwItemsById, "14", "Sailfish", "1", "root");
		importFolder(vwItemsById, "141", "Sailfish 100", "14", "root#1");
		importFolder(vwItemsById, "142", "Sailfish 200", "14", "root#1");
		importFolder(vwItemsById, "143", "Sailfish 300", "14", "root#1");
		
		//
		importFolder(vwItemsById, "2", "Technologies", "root", null);
		
		importFolder(vwItemsById, "21", "Software", "2", "root");
		importFolder(vwItemsById, "211", "Runtime", "21", "root#2");
		importFolder(vwItemsById, "212", "Apps", "21", "root#2");
		importFolder(vwItemsById, "213", "Tools", "21", "root#2");
		
		importFolder(vwItemsById, "22", "3G/4G", "2", "root");
		importFolder(vwItemsById, "221", "System-on-chip", "22", "root#2");
		importFolder(vwItemsById, "222", "Modules", "22", "root#2");
		
		importFolder(vwItemsById, "23", "Bluetooth", "2", "root");
		importFolder(vwItemsById, "231", "Bluetooth 3.0", "23", "root#2");
		importFolder(vwItemsById, "232", "Bluetooth 4.0", "23", "root#2");
		
		importFolder(vwItemsById, "24", "NFC", "2", "root");
		importFolder(vwItemsById, "241", "Smartcards", "24", "root#2");
		importFolder(vwItemsById, "242", "Inlays", "24", "root#2");
		importFolder(vwItemsById, "243", "Chipsets", "24", "root#2");
		
		importFolder(vwItemsById, "25", "Picocells", "2", "root");
		importFolder(vwItemsById, "251", "Chipsets", "25", "root#2");
		importFolder(vwItemsById, "252", "Modules", "25", "root#2");
		importFolder(vwItemsById, "253", "Systems", "25", "root#2");
		
		//
		importFolder(vwItemsById, "3", "Solutions", "root", null);
		
		importFolder(vwItemsById, "31", "Engineering services", "3", "root");
		importFolder(vwItemsById, "311", "Consulting", "31", "root#3");
		importFolder(vwItemsById, "312", "Testing", "31", "root#3");
		importFolder(vwItemsById, "313", "Certification", "31", "root#3");
		
		importFolder(vwItemsById, "32", "LBS", "3", "root");
		importFolder(vwItemsById, "321", "Consulting", "32", "root#3");
		importFolder(vwItemsById, "322", "Prototyping", "32", "root#3");
		
		importFolder(vwItemsById, "33", "Smartwatches", "3", "root");
		importFolder(vwItemsById, "331", "Consulting", "33", "root#3");
		importFolder(vwItemsById, "332", "Prototyping", "33", "root#3");
		
		importFolder(vwItemsById, "34", "Secure systems", "3", "root");
		importFolder(vwItemsById, "341", "Consulting", "34", "root#3");
		importFolder(vwItemsById, "342", "Testing", "34", "root#3");
		importFolder(vwItemsById, "343", "Certification", "34", "root#3");
		
	}
	
	*/
	
	private static Date readDate(Document doc, String itemName) {

		Item itDate = null;
		Date result = null;

		try {

			itDate = doc.getFirstItem(itemName);

			if (itDate != null) {
				if (itDate.getDateTimeValue() != null) {

					result = itDate.getDateTimeValue().toJavaDate();
				}
			}

		} catch (NotesException e) {
			e.printStackTrace();
		} finally {
			recycle(itDate);
		}

		return result;

	}
	


	public static void setDate(Document doc, String itemName, Date date) {

		if (date == null) {
			return;
		}

		DateTime dt = null;

		try {

			dt = doc.getParentDatabase().getParent().createDateTime(date);
			doc.replaceItemValue(itemName, dt);

		} catch (NotesException e) {
			System.out.println(e);
		} finally {
			recycle(dt);
		}

	}

	// recycle all objects in the arguments (in that order)
	@SuppressWarnings("unchecked")
	private static void recycle(final Object... args) {
		for (Object o : args) {
			if (o != null) {
				if (o instanceof lotus.domino.Base) {
					try {
						((Base) o).recycle();
					} catch (Throwable t) {
						// who cares?
					}
				} else if (o instanceof Map) {
					Set&lt;Map.Entry&gt; entries = ((Map) o).entrySet();
					for (Map.Entry&lt;?, ?&gt; entry : entries) {
						recycle(entry.getKey(), entry.getValue());
					}
				} else if (o instanceof Collection) {
					Iterator i = ((Collection) o).iterator();
					while (i.hasNext()) {
						Object obj = i.next();
						recycle(obj);
					}

				} else if (o.getClass().isArray()) {
					try {
						Object[] objs = (Object[]) o;
						for (Object ao : objs) {
							recycle(ao);
						}
					} catch (Throwable t) {
						// who cares?
					}
				}
			}
		}
	}

}
</java></javaproject></code>
<rundata processeddocs='0' exitcode='0' agentdata='38A58E7F90F8D059C1257C2100439B2F'>
<agentmodified><datetime>20131112T131805,18+01</datetime></agentmodified>
<agentrun><datetime>20131112T131832,27+01</datetime></agentrun>
<runlog>Started running agent 'Media import from DocLib' on 12-11-2013 13:18:30
Ran Java Agent Class
Done running agent 'Media import from DocLib' on 12-11-2013 13:18:32
</runlog></rundata>
<item name='$JavaCompilerSource'><text>1.5</text></item>
<item name='$JavaCompilerTarget'><text>1.5</text></item></agent>

